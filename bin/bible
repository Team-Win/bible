#!/usr/bin/env ruby

require 'gli'
require 'bible'

include GLI::App

program_desc 'A ruby implementation of the bible-kjv package available on Ubuntu'

version Bible::VERSION

desc 'Read the bible'
arg_name '[version]'
command :read do |c|
  c.action do |global_options,options,args|
    version = args[0]
    cli = Bible::Cli.new(version.upcase, "db/#{version.downcase}.db")
    cli.start
  end
end


desc 'Import a new version of the bible'
arg_name '[bible_file.xml] [version_name(optional)]'
command :import do |c|
  c.action do |global_options,options,args|
    bible_file = args[0]
    version_name = args[1] || File.basename(bible_file, ".*")
# importer = BibleImporter.new('../bible_sources/bibles/niv.xml')
    importer = Bible::Importer.new(bible_file, version_name)
    importer.start
  end
end



desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe new here'
arg_name 'Describe arguments to new here'
command :new do |c|
  c.desc 'Describe a switch to new'
  c.switch :s

  c.desc 'Describe a flag to new'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "new command ran"
  end
end

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

desc 'Describe done here'
arg_name 'Describe arguments to done here'
command :done do |c|
  c.action do |global_options,options,args|
    puts "done command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)


